#!/bin/bash

# Global options (and their defaults). If the global is empty, it must be given
# as an argument when the script is called.
src=
dst=
enc="v0"
torrent=
spectral=
announce=

# FLAC encoding flags.
flac_flags=(
  --totally-silent
  --decode
  --stdout
  )

# Lame encoding flags.
lame_flags=(
  --add-id3v2
  --id3v2-only
  --pad-id3v2
  --ignore-tag-errors
  --silent
  )

# Parse options.
function opts() {
  # Iterate over args until none remain
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        help
        exit 0
        ;;
      -e|--encoding)
        enc="$2"
        shift
        ;;
      -t|--torrent)
        torrent=true
        ;;
      -s|--spectral)
        spectral=true
        ;;
      *)
        if [[ -z "$src" ]]; then
          src="$1"
        elif [[ -z "$dst" ]]; then
          dst="$1"
        fi
        ;;
    esac
    shift
  done

  # Load LAME flags from specified encoding
  case "$enc" in
    cbr)
      lame_flags+=( --cbr -b 320 )
      ;;
    v0)
      lame_flags+=( -V0 )
      ;;
    *)
      help && exit 1
      ;;
  esac
}

# Documentation.
function help() {
  printf "\
usage: better [options] <src> <dst>

    -h, --help        display this help and exit

    -e fmt
    --encoding fmt
        fmt = cbr, v0
        target encoding to transcode to, v0 by default

    -t, --torrent     make .torrent files

    -s, --spectral    make spectrograms instead of converting

"
}

# Get a tag out of a .flac file.
# @param  $1  name of the tag
# @param  $2  file to extract tag from
function tag () {
  local ftag="$1"
  local file="$2"
  local out=$(metaflac --show-tag="$ftag" "$file")
  printf "%s" "${out#*=}"
}

# Transcode from $src to $dst.
# @param  $@  list of all files to transcode
function transcode () {
  for f in "$@"; do
    # Get file metadata
    albumartist=$(tag ALBUMARTIST "$f")
    artist=$(tag ARTIST "$f")
    album=$(tag ALBUM "$f")
    track=$(tag TRACKNUMBER "$f")
    title=$(tag TITLE "$f")
    year=$(tag ORIGINALYEAR "$f")
    genre=$(tag GENRE "$f")
    [[ -z "$albumartist" ]] && albumartist="$artist"
    [[ -z "$year" ]] && year=$(tag DATE "$f")

    # Get album art
    # TODO(ntruong): there's GOTTA be a better way to do this
    local dir=$(echo "$f" | sed "s/\/[^/]*$//")
    [[ -e "$dir/folder.gif" ]] && art="$dir/folder.gif"
    [[ -e "$dir/folder.jpg" ]] && art="$dir/folder.jpg"
    [[ -e "$dir/folder.png" ]] && art="$dir/folder.png"
    [[ -e "$dir/cover.gif" ]] && art="$dir/cover.gif"
    [[ -e "$dir/cover.jpg" ]] && art="$dir/cover.jpg"
    [[ -e "$dir/cover.png" ]] && art="$dir/cover.png"

    # Convert the file
    local dir="$dst/$albumartist/$album ($year) [$enc]"
    mkdir -p "$dir"
    local dest=$(echo ${f##*/} | sed "s/flac$/mp3/")
    echo " [~] converting $album - $title"
    flac "${flac_flags[@]}" "$f" | lame ${lame_flags[@]} \
      --ta "$artist" --tl "$album" \
      --tn "$track"  --tt "$title" \
      --ty "$year"   --tg "${genre:-12}" \
      --tv "TPE2=$albumartist" \
      --ti "$art" \
      - "$dir/$dest" &> /dev/null
  done
}

# Make torrent files using the given announce.
function maketorrent () {
  for artist in `cd "$dst" && ls -d */`; do
    for album in `cd "$dst/$artist" && ls -d */`; do
      local torrent="${album%\/}.torrent"
      mktorrent -p -a "$announce" -o "$dst/$torrent" "$dst/$artist$album"
    done
  done
}

# Generate spectrograms.
function spectrogram () {
  for f in "$@"; do
    track="${f%*.flac}"
    track="${track##*/}"
    sox "$f" -n spectrogram -t "$track" -o "$dst/$track.png"
  done
}

function main() {
  # Make the destination directory if it doesn't already exist
  mkdir -p "$dst"
  # Enumerate all files to examine.
  files=( $(find "$src" -name "*.flac") )
  # Check if we only want to generate spectrograms.
  if [[ "$spectral" = true ]]; then
    spectrogram "${files[@]}"
    exit 0
  fi
  # Transcode the files
  transcode "${files[@]}"
  # Make torrent file in the root of destination directory
  [[ "$torrent" = true ]] && maketorrent
}

IFS=$'\n'
opts "$@"
main
exit 0
