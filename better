#!/bin/bash

# Global options (and their defaults). If the global is empty, it must be given
# as an argument when the script is called.
files=()
dst="."
enc="v0"
spectral=false
torrent=false
announce=

# FLAC encoding flags.
flac_flags=(
  --totally-silent
  --decode
  --stdout
  )

# Lame encoding flags.
lame_flags=(
  --add-id3v2
  --id3v2-only
  --pad-id3v2
  --ignore-tag-errors
  --silent
  )

# Parse options.
function opts () {
  # Iterate over args until none remain
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        help
        exit 0
        ;;
      -e|--encoding)
        enc="$2"
        shift
        ;;
      -o|--output)
        dst="$2"
        shift
        ;;
      -s|--spectral)
        spectral=true
        ;;
      -t|--torrent)
        torrent=true
        ;;
      *)
        files+=( "$1" )
        ;;
    esac
    shift
  done

  # If no inputs were given, show help and exit
  if [[ "${#files[@]}" -eq 0 ]]; then
    help
    exit 1
  fi

  # Load LAME flags from specified encoding
  case "$enc" in
    cbr)
      lame_flags+=( --cbr -b 320 )
      ;;
    v0)
      lame_flags+=( -V0 )
      ;;
    *)
      help && exit 1
      ;;
  esac
}

# Documentation.
function help () {
  printf "\
usage: better [options] [file ...]

    -h, --help        display this help and exit

    -e fmt
    --encoding fmt
        fmt = cbr, v0
        target encoding to transcode to, v0 by default

    -o, --output      output directory (defaults to current directory)

    -s, --spectral    make spectrograms instead of converting

    -t, --torrent     make .torrent files

"
}

# Get a tag out of a .flac file.
# @param  $1  name of the tag
# @param  $2  file to extract tag from
function tag () {
  local ftag="$1"
  local file="$2"
  local out=$(metaflac --show-tag="$ftag" "$file")
  printf "%s" "${out#*=}"
}

# Transcode a directory.
# @param  $1  directory with .flac files to transcode
function transcode () {
  # Get album art if it exists
  local ti=$(find "$1" -type f | grep -iE "(cover|folder)\.(jpg|png|gif)$")

  # Transcode all the files in the directory
  for file in $(find "$1" -name "*.flac"); do
    echo " [~] converting $file"

    # Get tags as a shell variable to save time
    for tag in $(metaflac --export-tags-to=- "$file"); do
      local key="${tag%=*}"
      local val="${tag#*=}"
      case "$key" in
        TITLE)
          local tt="$val"
          ;;
        TRACKNUMBER)
          local tn="$val"
          ;;
        ALBUM)
          local tl="$val"
          ;;
        ARTIST)
          local ta="$val"
          ;;
        ALBUMARTIST)
          local tpe2="$val"
          ;;
        ORIGINALYEAR)
          local ty="$val"
          ;;
        DATE)
          local date="$val"
          ;;
      esac
    done
    [[ -z "$tpe2" ]] && local tpe2="$ta"
    [[ -z "$ty" ]]   && local ty="$date"

    # Convert the file
    local dir="$dst/$tpe2/$tl ($ty) [$enc]"
    mkdir -p "$dir"
    local mp3=$(echo ${file##*/} | sed "s/flac$/mp3/")
    flac "${flac_flags[@]}" "$file" | lame ${lame_flags[@]} \
      --tt "$tt" --tn "$tn" \
      --tl "$tl" --ta "$ta" \
      --ty "$ty" --ti "$ti" \
      --tv "TPE2=$tpe2" \
      - "$dir/$mp3" &> /dev/null &
  done

  # Wait for all the files in the directory to transcode
  # TODO(ntruong): error checking?
  wait
}

# Generate spectrograms.
# @param  $1  directory with .flac files to spectralize
function spectrogram () {
  for file in $(find "$1" -name "*.flac" -name "*.mp3"); do
    track=$(echo "$file" | sed "s/\.flac$//" | sed "s/.*\///")
    sox "$file" -n spectrogram -t "$track" -o "$dst/$track.png" &
  done

  # Wait for all the spectrals
  wait
}

# Make torrent files using the given announce.
function maketorrent () {
  for artist in $(cd "$dst" && ls -d */); do
    for album in $(cd "$dst/$artist" && ls -d */); do
      local torrent="${album%\/}.torrent"
      mktorrent -p -a "$announce" -o "$dst/$torrent" "$dst/$artist$album"
    done
  done
}

function main () {
  # Make the destination directory if it doesn't already exist
  mkdir -p "$dst"
  # Check if we only want to generate spectrograms.
  if [[ "$spectral" = true ]]; then
    for f in "${files[@]}"; do
      spectrogram "$f"
    done
    exit 0
  fi
  # Transcode the files
  for f in "${files[@]}"; do
    transcode "$f"
  done
  # Make torrent file in the root of destination directory
  [[ "$torrent" = true ]] && maketorrent
}

IFS=$'\n'
opts "$@"
main
exit 0
